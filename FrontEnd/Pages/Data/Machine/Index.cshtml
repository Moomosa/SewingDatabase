@page "{currentpage=1}/{sort?}/{sortDirection?}"
@using ModelLibrary.Models.Shared;
@model FrontEnd.Pages.Data.Machine.IndexModel

@{
	ViewData["Title"] = "Index";
	var currentSortProperty = Model.Sort;
	var currentSortDirection = Model.SortDirection;
	var columns = new List<TableHeaderModel>
	{
		new TableHeaderModel("Brand", "Brand", currentSortProperty, currentSortDirection, false),
		new TableHeaderModel("Model", "Model", currentSortProperty, currentSortDirection, false),
		new TableHeaderModel("PurchaseDate", "Purchase Date", currentSortProperty, currentSortDirection, false),
		new TableHeaderModel("PurchasePrice", "Purchase Price", currentSortProperty, currentSortDirection, false),
		new TableHeaderModel("LastServiced", "Date Last Serviced", currentSortProperty, currentSortDirection, false)
	};
}

<h1>Machines</h1>

@if (Model.Items.Count != 0)
{
	<div class="d-flex justify-content-between align-items-center">
		<h4>
			<a asp-page="Create">Add New Machine</a>
		</h4>
		<partial name="_PageSizeDropdown" model="Model" />
	</div>
	<table class="table table-colors">
		<thead>
			<tr>
				@foreach (var column in columns)
				{
					<partial name="_SortableHeader" model="column" />
				}
				<th></th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in Model.Items)
			{
				<tr class="table-row-clickable" data-href='@Url.Page("./Details", new {id = item.ID})'>
					<td>
						@Html.DisplayFor(modelItem => item.Brand)
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.Model)
					</td>
					<td>
						@item.PurchaseDate.ToString("MMMM dd yyyy")
					</td>
					<td>
						@Html.DisplayFor(modelItem => item.PurchasePrice)
					</td>
					<td>
						@item.LastServiced.ToString("MMMM dd yyyy")
					</td>
					<td>
						<partial name="_IndexActionPartial" model="@item.ID" />
					</td>
				</tr>
			}
		</tbody>
	</table>
	<div>
		@await Html.PartialAsync("_Pagination", Model)
	</div>
}
else
{
	<h5>Not everyone sews just by hand. Let's add a machine <a asp-page="./Create">here</a>.</h5>
}